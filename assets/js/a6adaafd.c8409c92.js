"use strict";(globalThis.webpackChunkaws_cloud_operations_best_practices=globalThis.webpackChunkaws_cloud_operations_best_practices||[]).push([[9501],{861:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"guides/centralized-operations-management/node-management/managing-ssm-agent","title":"Managing SSM Agent within an AWS Organization","description":"This section outlines how to manage SSM agent installation within an AWS Organization and provides sample code CloudFormation, Terraform, Shell, PowerShell, Ansible, Chef, and Puppet.","source":"@site/docs/guides/centralized-operations-management/node-management/managing-ssm-agent.mdx","sourceDirName":"guides/centralized-operations-management/node-management","slug":"/guides/centralized-operations-management/node-management/managing-ssm-agent","permalink":"/cloud-operations-best-practices/docs/guides/centralized-operations-management/node-management/managing-ssm-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Node Management","permalink":"/cloud-operations-best-practices/docs/guides/centralized-operations-management/node-management/"},"next":{"title":"Patch Management","permalink":"/cloud-operations-best-practices/docs/guides/centralized-operations-management/patch-management/"}}');var t=a(4848),i=a(8453),o=a(1470),r=a(9365);const l={sidebar_position:1},c="Managing SSM Agent within an AWS Organization",d={},u=[{value:"Understanding SSM Agent",id:"understanding-ssm-agent",level:2},{value:"Operating system support",id:"operating-system-support",level:2},{value:"AMIs with SSM Agent pre-installed",id:"amis-with-ssm-agent-pre-installed",level:2},{value:"SSM Agent installation methods",id:"ssm-agent-installation-methods",level:2},{value:"Installing SSM Agent on new instances",id:"installing-ssm-agent-on-new-instances",level:3},{value:"Golden AMI Approach",id:"golden-ami-approach",level:4},{value:"Infrastructure as Code (IaC)",id:"infrastructure-as-code-iac",level:4},{value:"EC2 Console/API/SDK",id:"ec2-consoleapisdk",level:4},{value:"Application Migration Service (MGN)",id:"application-migration-service-mgn",level:4},{value:"Amazon EKS",id:"amazon-eks",level:4},{value:"Installing SSM Agent on running instances",id:"installing-ssm-agent-on-running-instances",level:3},{value:"Configuration management tools",id:"configuration-management-tools",level:4},{value:"EC2 user data",id:"ec2-user-data",level:4},{value:"Group Policy (for Windows)",id:"group-policy-for-windows",level:4},{value:"SSH (for Linux)",id:"ssh-for-linux",level:4},{value:"Amazon EKS - Existing instances",id:"amazon-eks---existing-instances",level:4},{value:"Amazon Workspaces",id:"amazon-workspaces",level:4},{value:"Managing IAM permissions for SSM Agent",id:"managing-iam-permissions-for-ssm-agent",level:2},{value:"Default Host Management Configuration (DHMC)",id:"default-host-management-configuration-dhmc",level:3},{value:"Methods to enable DHMC:",id:"methods-to-enable-dhmc",level:4},{value:"Individual instance permissions",id:"individual-instance-permissions",level:3},{value:"Attaching instance profile to EC2 instances at launch",id:"attaching-instance-profile-to-ec2-instances-at-launch",level:4},{value:"Launching instances using Systems Manager Automation runbooks",id:"launching-instances-using-systems-manager-automation-runbooks",level:4},{value:"Attaching instance profiles to already running EC2 instances",id:"attaching-instance-profiles-to-already-running-ec2-instances",level:3}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"managing-ssm-agent-within-an-aws-organization",children:"Managing SSM Agent within an AWS Organization"})}),"\n",(0,t.jsx)(n.p,{children:"This section outlines how to manage SSM agent installation within an AWS Organization and provides sample code CloudFormation, Terraform, Shell, PowerShell, Ansible, Chef, and Puppet."}),"\n",(0,t.jsx)(n.p,{children:"Please keep in mind that this is sample code and should be thoroughly tested and validated in a development environment prior to any usage in a production environment."}),"\n",(0,t.jsx)(n.h2,{id:"understanding-ssm-agent",children:"Understanding SSM Agent"}),"\n",(0,t.jsxs)(n.p,{children:["As discussed in the previous sections, to get started with managing your nodes in your environment using Systems Manager, nodes must be ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/operating-systems-and-machine-types.html#supported-machine-types",children:"managed"}),", which means SSM Agent is installed on the machine and the agent can communicate with the Systems Manager service endpoints with required permissions."]}),"\n",(0,t.jsxs)(n.p,{children:["AWS Systems Manager Agent (SSM Agent) is Amazon software that runs on Amazon Elastic Compute Cloud (Amazon EC2) instances, edge devices, on-premises servers, and virtual machines (VMs). The source code for SSM Agent is available on ",(0,t.jsx)(n.a,{href:"https://github.com/aws/amazon-ssm-agent",children:"GitHub"}),". SSM Agent makes it possible for Systems Manager to update, manage, and configure these resources. The agent processes requests from the Systems Manager service in the AWS Cloud, and then runs them as specified in the request."]}),"\n",(0,t.jsx)(n.p,{children:"Therefore, ensuring the SSM Agent is installed on nodes is necessary and the very first step to address when starting the journey with node management operations using the AWS Systems Manager service."}),"\n",(0,t.jsx)(n.h2,{id:"operating-system-support",children:"Operating system support"}),"\n",(0,t.jsxs)(n.p,{children:["SSM Agent is supported on a wide range of operating systems and machine types. See ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/operating-systems-and-machine-types.html",children:"Supported operating systems and machine types"})," in User guide to verify that your operating system (OS), OS version, and machine type are supported."]}),"\n",(0,t.jsx)(n.h2,{id:"amis-with-ssm-agent-pre-installed",children:"AMIs with SSM Agent pre-installed"}),"\n",(0,t.jsxs)(n.p,{children:["To get started with Systems Manager, AWS Systems Manager Agent (SSM Agent) is preinstalled on some Amazon Machine Images (AMIs) provided by AWS and trusted third-parties. See ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/ami-preinstalled-agent.html",children:"Find AMIs with the SSM Agent preinstalled"}),", to get the list of operating systems where its preinstalled."]}),"\n",(0,t.jsx)(n.h2,{id:"ssm-agent-installation-methods",children:"SSM Agent installation methods"}),"\n",(0,t.jsx)(n.p,{children:"Now that we understand which operating systems support SSM Agent, let's explore the various methods to install the agent on instances which do not have SSM Agent preinstalled. The installation approach can be categorized into two main scenarios:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"New instance deployment"}),": Installing SSM Agent when launching new instances."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Existing instance management"}),": Installing SSM Agent on already running instances."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"installing-ssm-agent-on-new-instances",children:"Installing SSM Agent on new instances"}),"\n",(0,t.jsx)(n.p,{children:"When launching new instances, incorporating SSM Agent installation into your initial setup process ensures consistent management capabilities from the start. This approach eliminates the need for post-deployment installation. You can achieve this through various methods such as Golden AMIs, user data scripts, or infrastructure as code tools etc. The choice of method often depends on your organization's deployment practices and scaling requirements."}),"\n",(0,t.jsx)(n.h4,{id:"golden-ami-approach",children:"Golden AMI Approach"}),"\n",(0,t.jsx)(n.p,{children:"A Golden AMI is a customized Amazon Machine Image that serves as a standardized template for launching EC2 instances. For Systems Manager integration, organizations can create Golden AMIs with SSM Agent pre-installed, ensuring all instances launched from these AMIs are immediately manageable through Systems Manager. This approach eliminates the need for post-launch installation scripts and reduces the risk of deployment failures."}),"\n",(0,t.jsx)(n.p,{children:"Creating a Golden AMI"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Manually: Creating a Golden AMI manually can be done by launching an instance, installing and configuring SSM Agent, testing the configuration, and then creating an AMI from that instance."}),"\n",(0,t.jsxs)(n.li,{children:["EC2 Image builder: If you are using EC2 Image Builder for creating golden images, configure the ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/imagebuilder/latest/userguide/start-build-image-pipeline.html#start-build-image-step2",children:"image recipe"})," and select the option to keeps the SSM agent in the output image."]}),"\n",(0,t.jsx)(n.li,{children:"Hashicorp Packer: If you are Hasicorp Packer, use the shell Packer provisioner to run shell commands to install SSM agent."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "provisioners": [\n    {\n      "type": "shell",\n      "inline": [\n        "if [ -f /etc/system-release ]; then",\n        "  # Amazon Linux",\n        "  sudo yum install -y amazon-ssm-agent",\n        "  sudo systemctl enable amazon-ssm-agent",\n        "  sudo systemctl start amazon-ssm-agent",\n        "elif [ -f /etc/lsb-release ]; then",\n        "  # Ubuntu",\n        "  sudo snap install amazon-ssm-agent \u2014classic",\n        "  sudo systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service",\n        "  sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service",\n        "fi"\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, provide the path to the script which contains Agent installation shell commands."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "provisioners": [{\n    "type": "shell",\n    "script": "scripts/install_ssm.sh"\n  }]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When using Packer with script provisioner, the ",(0,t.jsx)(n.code,{children:"install_ssm.sh"})," should be stored relative to your Packer configuration file (",(0,t.jsx)(n.code,{children:".json"})," or ",(0,t.jsx)(n.code,{children:".pkr"})," ",(0,t.jsx)(n.code,{children:".hcl"}),")."]}),"\n",(0,t.jsx)(n.h4,{id:"infrastructure-as-code-iac",children:"Infrastructure as Code (IaC)"}),"\n","\n",(0,t.jsxs)(o.A,{groupId:"iacprovider",defaultValue:"cloudformation",values:[{label:"CloudFormation",value:"cloudformation"},{label:"Terraform",value:"terraform"}],children:[(0,t.jsxs)(r.A,{value:"cloudformation",children:[(0,t.jsxs)(n.p,{children:["If you use CloudFormation to launch instances using AMIs that do not have SSM agent pre-installed, you can leverage the ",(0,t.jsx)(n.code,{children:"UserData"})," property to install SSM agent."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  # EC2 Instance\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !FindInMap\n        - RegionMap\n        - !Ref AWS::Region\n        - !Ref OperatingSystem\n      InstanceType: !FindInMap\n        - EnvironmentSettings\n        - !Ref EnvironmentType\n        - InstanceType\n      IamInstanceProfile: !Ref SSMInstanceProfile\n      UserData: !If\n        - !Base64\n          'Fn::Sub': |\n            #!/bin/bash\n            # Install SSM Agent based on OS\n            if [ -f /etc/os-release ]; then\n                . /etc/os-release\n                case \"$ID\" in\n                    amzn|rhel)\n                        yum install -y amazon-ssm-agent\n                        systemctl enable amazon-ssm-agent\n                        systemctl start amazon-ssm-agent\n                        ;;\n                    ubuntu)\n                        snap install amazon-ssm-agent \u2014classic\n                        systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service\n                        systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service\n                        ;;\n                esac\n            fi\n"})})]}),(0,t.jsxs)(r.A,{value:"terraform",children:[(0,t.jsxs)(n.p,{children:["When using Terraform, create a script file which contains SSM agent installation shell commands. Then use the ",(0,t.jsx)(n.code,{children:"user_data"})," property of the instance resource to point to the installation script file."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'# EC2 Instance\nresource "aws_instance" "web" {\n  ami           = data.aws_ami.amazon_linux_2.id\n  instance_type = "t2.micro"\n\n  subnet_id                   = data.aws_subnet.main.id\n  vpc_security_group_ids      = [aws_security_group.allow_ssm.id]\n  iam_instance_profile        = aws_iam_instance_profile.ssm_profile.name\n  associate_public_ip_address = true\n\n  user_data = filebase64("${path.module}/scripts/install_ssm.sh")\n\n  tags = {\n    Name = "SSM-enabled-instance"\n  }\n}\n\n# Output\noutput "instance_id" {\n  value = aws_instance.web.id\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h4,{id:"ec2-consoleapisdk",children:"EC2 Console/API/SDK"}),"\n",(0,t.jsx)(n.p,{children:"When launching the EC2 instance using EC2 console or any SDK, add user data with SSM Agent installation commands to an Amazon EC2 instance before you launch the instance."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refer to steps mentioned in this article for Linux: ",(0,t.jsx)(n.a,{href:"https://repost.aws/knowledge-center/install-ssm-agent-ec2-linux",children:"How do I install SSM Agent on an Amazon EC2 Linux instance at launch?"})]}),"\n",(0,t.jsxs)(n.li,{children:["Refer to steps mentioned in this article for Windows: ",(0,t.jsx)(n.a,{href:"https://repost.aws/knowledge-center/ssm-agent-windows-ec2",children:"How do I install AWS Systems Manager Agent (SSM Agent) on an Amazon EC2 Windows instance at launch?"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"application-migration-service-mgn",children:"Application Migration Service (MGN)"}),"\n",(0,t.jsxs)(n.p,{children:["If your servers are migrated and launched using Application Migration Service, use the ",(0,t.jsx)(n.strong,{children:"post-launch"})," settings to install SSM Agent. Refer to the steps outlined ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/mgn/latest/ug/post-launch-settings.html#post-launch-settings-activation",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"amazon-eks",children:"Amazon EKS"}),"\n",(0,t.jsxs)(n.p,{children:["The latest Amazon EKS optimized AMIs install SSM Agent automatically. If you are using a customized AMI, to install SSM Agent, use ",(0,t.jsx)(n.code,{children:"preBootstrapCommands"})," property as outlined ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/install-the-ssm-agent-and-cloudwatch-agent-on-amazon-eks-worker-nodes-using-prebootstrapcommands.html",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"installing-ssm-agent-on-running-instances",children:"Installing SSM Agent on running instances"}),"\n",(0,t.jsx)(n.p,{children:"For instances that are already running in your environment, you can install SSM Agent using various remote access and automation methods. The installation process varies depending on your operating system type, access methods available, and network configuration. This section describes different approaches you can use to install SSM Agent on your existing instances."}),"\n",(0,t.jsx)(n.h4,{id:"configuration-management-tools",children:"Configuration management tools"}),"\n",(0,t.jsx)(n.p,{children:"If your organization uses configuration management tools such as Puppet, Chef, or Ansible, you can leverage these existing tools to deploy SSM Agent across your instances."}),"\n",(0,t.jsxs)(o.A,{groupId:"cmtool",defaultValue:"ansible",values:[{label:"Ansible",value:"ansible"},{label:"Chef",value:"chef"},{label:"Puppet",value:"puppet"}],children:[(0,t.jsx)(r.A,{value:"ansible",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- name: Install SSM Agent across fleet\n  hosts: all\n  become: yes\n\n  tasks:\n    - name: Detect OS family\n      ansible.builtin.set_fact:\n        os_family: "{{ ansible_facts[\'os_family\'] }}"\n\n    - name: Install SSM Agent on RedHat family\n      block:\n        - name: Download SSM Agent RPM\n          get_url:\n            url: "https://s3.{{ aws_region }}.amazonaws.com/amazon-ssm-{{ aws_region }}/latest/linux_amd64/amazon-ssm-agent.rpm"\n            dest: /tmp/amazon-ssm-agent.rpm\n            mode: \'0644\'\n\n        - name: Install SSM Agent\n          yum:\n            name: /tmp/amazon-ssm-agent.rpm\n            state: present\n      when: os_family == "RedHat"\n\n    - name: Install SSM Agent on Debian family\n      block:\n        - name: Install SSM Agent via Snap\n          community.general.snap:\n            name: amazon-ssm-agent\n            classic: yes\n      when: os_family == "Debian"\n\n    - name: Enable and start SSM Agent\n      systemd:\n        name: amazon-ssm-agent\n        enabled: yes\n        state: started\n\n    - name: Verify installation\n      command: systemctl status amazon-ssm-agent\n      register: ssm_status\n      ignore_errors: yes\n\n    - name: Report status\n      debug:\n        var: ssm_status.stdout_lines\n'})})}),(0,t.jsx)(r.A,{value:"puppet",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-puppet",children:"if $facts['os']['family'] == 'RedHat' {\n  package { 'amazon-ssm-agent':\n    ensure => installed,\n    source => 's3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm',\n    provider => 'rpm',\n  }\n} elsif $facts['os']['family'] == 'Debian' {\n  package { 'amazon-ssm-agent':\n    ensure => installed,\n    source => 's3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb',\n    provider => 'dpkg',\n  }\n}\n\nservice { 'amazon-ssm-agent':\n  ensure => running,\n  enable => true,\n  require => Package['amazon-ssm-agent'],\n}\n"})})}),(0,t.jsx)(r.A,{value:"chef",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# cookbooks/ssm_agent/recipes/default.rb\ncase node['platform_family']\nwhen 'rhel'\n  remote_file '/tmp/amazon-ssm-agent.rpm' do\n    source \"https://s3.#{node['region']}.amazonaws.com/amazon-ssm-#{node['region']}/latest/linux_amd64/amazon-ssm-agent.rpm\"\n    mode '0644'\n    action :create\n  end\n\n  package 'amazon-ssm-agent' do\n    source '/tmp/amazon-ssm-agent.rpm'\n    action :install\n  end\n\nwhen 'debian'\n  execute 'install_ssm_agent' do\n    command 'snap install amazon-ssm-agent \u2014classic\u2019\n    not_if 'snap list | grep amazon-ssm-agent'\n  end\nend\n\nservice 'amazon-ssm-agent' do\n  action [:enable, :start]\nend\n"})})})]}),"\n",(0,t.jsx)(n.h4,{id:"ec2-user-data",children:"EC2 user data"}),"\n",(0,t.jsx)(n.p,{children:"By default, user data command and cloud-init directives run only during the first boot cycle when an EC2 instance is launched. However, you can configure your user data command and cloud-init directives with a mime multi-part file."}),"\n",(0,t.jsxs)(n.p,{children:["To update the user data, ",(0,t.jsx)(n.strong,{children:"stop"})," the Instance. Click on ",(0,t.jsx)(n.strong,{children:"Actions"}),", Select ",(0,t.jsx)(n.strong,{children:"Instance settings"})," and choose ",(0,t.jsx)(n.strong,{children:"Edit User Data"}),"."]}),"\n",(0,t.jsxs)(o.A,{groupId:"os",defaultValue:"linux",values:[{label:"Linux",value:"linux"},{label:"Windows",value:"windows"}],children:[(0,t.jsx)(r.A,{value:"linux",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'Content-Type: multipart/mixed; boundary="//"\nMIME-Version: 1.0\n\n--//\nContent-Type: text/cloud-config; charset="us-ascii"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment;\n filename="cloud-config.txt"\n\n#cloud-config\ncloud_final_modules:\n- [scripts-user, always]\n--//\nContent-Type: text/x-shellscript; charset="us-ascii"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename="userdata.txt"\n\n#!/bin/bash\n# Amazon Linux 2, RHEL\ndnf install -y s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\nsystemctl enable amazon-ssm-agent\nsystemctl start amazon-ssm-agent\n--//--\n'})})}),(0,t.jsxs)(r.A,{value:"windows",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": The below PowerShell script works only with the EC2Launch v2 launch agent."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'<powershell>\n$dir = $env:TEMP + "\\ssm"\nNew-Item -ItemType directory -Path $dir -Force\ncd $dir\n(New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe", $dir + "\\AmazonSSMAgentSetup.exe")\nStart-Process .\\AmazonSSMAgentSetup.exe -ArgumentList @("/q", "/log", "install.log") -Wait\n</powershell>\n<persist>true</persist>\n'})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["When done programmatically using the ",(0,t.jsx)(n.code,{children:"ModifyInstanceAttribute"})," API, this script needs to be converted to base64-encoded text."]}),"\n",(0,t.jsx)(n.h4,{id:"group-policy-for-windows",children:"Group Policy (for Windows)"}),"\n",(0,t.jsx)(n.p,{children:"While Group Policy traditionally supports .msi packages, the AWS Systems Manager (SSM) Agent comes as an .exe file. To overcome this limitation, we'll use a combination of Group Policy and Scheduled Tasks to deploy the SSM Agent across your Windows environment."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create (or modify an existing) GPO in the appropriate hierarchy/OU in Active Directory. Edit the policy to utilize the computer scheduled task script configuration."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The option is located under Computer Configuration | Preferences | Control Panel Settings | Scheduled Tasks | Right-click and select New\u2192Immediate Task"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Select ",(0,t.jsx)(n.strong,{children:"Create"})," for the action, give the task a name, and specify ",(0,t.jsx)(n.code,{children:"NT AUTHORITY\\System"})," as the user account to run the task. Click on the radio button for ",(0,t.jsx)(n.strong,{children:"Run whether user is logged on or not"})," and click the ",(0,t.jsx)(n.strong,{children:"Triggers"})," tab to proceed to the next section."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Task Manager screenshot for SSMAgent properties",src:a(3659).A+"",title:"Task Manager screenshot for SSMAgent properties",width:"720",height:"608"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"For triggers, choose one time."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a new action to ",(0,t.jsx)(n.strong,{children:"Start a program"})," and choose ",(0,t.jsx)(n.code,{children:"powershell.exe"})," and for the ",(0,t.jsx)(n.strong,{children:"Argument"})," use the following:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"-ExecutionPolicy Bypass -Command \"$dir = $env:TEMP + '\\ssm'; New-Item -ItemType directory -Path $dir -Force; Set-Location $dir; (New-Object System.Net.WebClient).DownloadFile('https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe', $dir + '\\AmazonSSMAgentSetup.exe'); Start-Process .\\AmazonSSMAgentSetup.exe -ArgumentList @('/q', '/log', 'install.log') -Wait\"\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Task Manager screenshot for adding a new action",src:a(6851).A+"",title:"Task Manager screenshot for adding a new action",width:"2490",height:"1424"})}),"\n",(0,t.jsxs)(n.ol,{start:"6",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"OK"})," on New Action window and click ",(0,t.jsx)(n.strong,{children:"OK"})," on Properties window to close out those dialogues."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Once this is complete, any linked computers should get the installer pushed to them when the GP policy updates or when using ",(0,t.jsx)(n.code,{children:"gpudate /force"})," from the command prompt to force that action."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more information, see ",(0,t.jsx)(n.a,{href:"https://github.com/aws-samples/sample-ssm-automate-windows-hybrid-install",children:"Automate Registering Windows Managed Nodes in AWS Systems Manager"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"ssh-for-linux",children:"SSH (for Linux)"}),"\n",(0,t.jsx)(n.p,{children:"For Linux instances accessible via SSH, you can automate the SSM Agent installation using the following sample script. This script detects the OS type and installs the appropriate package."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nUSERNAME=ec2-user\nHOSTS=("192.168.1.121" "192.168.1.122" "192.168.1.123")\nKEY_PATH="/path/to/your/key.pem"\n\nfor HOSTNAME in ${HOSTS}; do\n    # Detect OS type\n    OS_TYPE=$(ssh -i "${KEY_PATH}" -l ${USERNAME} ${HOSTNAME} "cat /etc/os-release | grep \'^ID=\' | cut -d= -f2 | tr -d \'\\"\'")\n\n    case ${OS_TYPE} in\n        "amzn"|"rhel"|"centos")\n            SCRIPT="sudo yum install -y s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm && sudo systemctl start amazon-ssm-agent"\n            ;;\n        "ubuntu"|"debian")\n            SCRIPT="wget s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb && sudo dpkg -i amazon-ssm-agent.deb && sudo systemctl start amazon-ssm-agent"\n            ;;\n        *)\n            echo "Unsupported OS on ${HOSTNAME}"\n            continue\n            ;;\n    esac\n\n    ssh -i "${KEY_PATH}" -l ${USERNAME} ${HOSTNAME} "${SCRIPT}"\ndone\n'})}),"\n",(0,t.jsx)(n.h4,{id:"amazon-eks---existing-instances",children:"Amazon EKS - Existing instances"}),"\n",(0,t.jsxs)(n.p,{children:["The latest Amazon EKS optimized AMIs install SSM Agent automatically. If you are using a customized AMI, to install SSM Agent on running worker nodes, use Kubernetes Daemonset as outlined ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/install-ssm-agent-on-amazon-eks-worker-nodes-by-using-kubernetes-daemonset.html",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"amazon-workspaces",children:"Amazon Workspaces"}),"\n",(0,t.jsxs)(n.p,{children:["Use the customized solution documented ",(0,t.jsx)(n.a,{href:"https://github.com/aws-samples/workspaces-ssm-install",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"managing-iam-permissions-for-ssm-agent",children:"Managing IAM permissions for SSM Agent"}),"\n",(0,t.jsx)(n.p,{children:"Proper IAM permissions are crucial for SSM Agent functionality. AWS provides multiple approaches to manage these permissions, from manual instance profile attachment to automated organization-wide solutions."}),"\n",(0,t.jsx)(n.h3,{id:"default-host-management-configuration-dhmc",children:"Default Host Management Configuration (DHMC)"}),"\n",(0,t.jsx)(n.p,{children:"DHMC is AWS's recommended approach for managing SSM Agent permissions across your organization. It makes it possible to manage EC2 instances without your having to manually create an AWS Identity and Access Management (IAM) instance profile. Instead, Default Host Management Configuration creates and applies a default IAM role to ensure that Systems Manager has permissions to manage all instances in the AWS account and AWS Region where it's activated."}),"\n",(0,t.jsx)(n.h4,{id:"methods-to-enable-dhmc",children:"Methods to enable DHMC:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Through Unified Console Experience"}),": When ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-organizations.html",children:"onboarding to unified console experience"}),", DHMC is automatically enabled. This is enabled using a State Manager association created during onboarding and will enable DHMC in each target account and region."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Using Fleet Manager"}),": You can turn on the Default Host Management Configuration from the Fleet Manager console. You must turn on the Default Host Management Configuration one by one in each Region you where you want your Amazon EC2 instances managed. Refer to the steps ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-permissions.html#default-host-management",children:"here"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Through CLI/SDK"}),": This is done by creating the required role and updating the service setting using AWS CLI/SDK. You must turn on the Default Host Management Configuration one by one in each Region you where you want your Amazon EC2 instances managed. Refer to steps ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/fleet-manager-default-host-management-configuration.html#dhmc-activate",children:"here"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Though Quick Setup"}),": With Quick Setup, you can activate Default Host Management Configuration for all accounts and Regions that have been added to your organization in AWS Organizations. Refer to steps ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/fleet-manager-default-host-management-configuration.html#dhmc-activate",children:"here"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Using CloudFormation"}),": You can also use CloudFormation, to enable DHMC is multi accounts and region using StackSets. Refer to this ",(0,t.jsx)(n.a,{href:"https://aws.amazon.com/blogs/mt/enable-management-of-your-amazon-ec2-instances-in-aws-systems-manager-using-default-host-management-configuration/",children:"blog"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"individual-instance-permissions",children:"Individual instance permissions"}),"\n",(0,t.jsxs)(n.p,{children:["If you are not using DHMC, the permission for SSM agent must be granted at each instance level by using IAM Instance Profiles. We recommend creating the Instance Profile with the recommended Amazon Managed Policy for SSM agent, AmazonSSMManagedInstanceCore. Additional permissions to this instance profile will be required depending on the use case. See ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-permissions.html#instance-profile-policies-overview",children:"Additional policy considerations for managed instances"})," in User guide which discusses creating an IAM instance profile for SSM agent use and additional policy considerations."]}),"\n",(0,t.jsx)(n.h4,{id:"attaching-instance-profile-to-ec2-instances-at-launch",children:"Attaching instance profile to EC2 instances at launch"}),"\n",(0,t.jsxs)(o.A,{groupId:"iacprovider",defaultValue:"cloudformation",values:[{label:"CloudFormation",value:"cloudformation"},{label:"Terraform",value:"terraform"}],children:[(0,t.jsxs)(r.A,{value:"cloudformation",children:[(0,t.jsx)(n.p,{children:"If you are using CloudFormation to launch Instances, you can create an IAM instance profile resource and refer to it in your instance resource."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nResources:\n  SSMInstanceRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ec2.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n  SSMInstanceProfile:\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      Path: /\n      Roles:\n        - !Ref SSMInstanceRole\n\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      IamInstanceProfile: !Ref SSMInstanceProfile\n      # Other instance properties\n"})}),(0,t.jsx)(n.p,{children:"When deploying Autoscaling groups, the Launch template resource property can refer to use the Instance Profile."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# ASG with SSM Instance Profile\nResources:\n  AutoScalingGroup:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    Properties:\n      LaunchTemplate:\n        LaunchTemplateId: !Ref LaunchTemplate\n        Version: !GetAtt LaunchTemplate.LatestVersionNumber\n\n  LaunchTemplate:\n    Type: AWS::EC2::LaunchTemplate\n    Properties:\n      LaunchTemplateData:\n        IamInstanceProfile:\n          Name: !Ref SSMInstanceProfile\n"})})]}),(0,t.jsxs)(r.A,{value:"terraform",children:[(0,t.jsx)(n.p,{children:"If you are using Terraform to launch instances, you can create an IAM Instance Profile resource and refer it in your Instance resource."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'# IAM Role and Instance Profile\nresource "aws_iam_role" "ssm_role" {\n  name = "SSMManagedInstanceRole"\n\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Effect = "Allow"\n        Principal = {\n          Service = "ec2.amazonaws.com"\n        }\n      }\n    ]\n  })\n}\n\nresource "aws_iam_role_policy_attachment" "ssm_policy" {\n  role       = aws_iam_role.ssm_role.name\n  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"\n}\n\nresource "aws_iam_instance_profile" "ssm_profile" {\n  name = "SSMManagedInstanceProfile"\n  role = aws_iam_role.ssm_role.name\n}\n\n# EC2 Instance with Profile\nresource "aws_instance" "example" {\n  # ... other configuration ...\n  iam_instance_profile = aws_iam_instance_profile.ssm_profile.name\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h4,{id:"launching-instances-using-systems-manager-automation-runbooks",children:"Launching instances using Systems Manager Automation runbooks"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-aws-createmanagedlinuxinstance.html",children:"AWS-CreateManagedLinuxInstance"})," and ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-aws-createmanagedwindowsinstance.html",children:"AWS-CreateManagedWindowsInstance"})," are pre-configured Systems Manager Automation runbooks that automate the process of creating and configuring managed instances. These runbooks ensure the instance profile have the required SSM Permissions are attached to the launched instances."]}),"\n",(0,t.jsx)(n.h3,{id:"attaching-instance-profiles-to-already-running-ec2-instances",children:"Attaching instance profiles to already running EC2 instances"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Using Quick Setup (Recommended): Using ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/quick-setup-host-management.html",children:"Amazon EC2 host management using Quick Setup"}),", you can configure to add the required IAM policies to the existing instance profiles attached to your instances, or to allow Quick Setup to create the IAM policies and instance profiles with the permissions needed for the configuration you choose. This option can target instances in multiple accounts in organization or specific OUs."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Using Systems Manager Automation : You can use the automation runbook ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-aws-setupmanagedroleonec2instance.html",children:"AWS-SetupManagedRoleOnEc2Instance"})," to configure an instance with the SSMRoleForManagedInstance managed IAM role for Systems Manager access.. If the specified role does not exist, it will be created by the automation. To target instances in multiple account and regions, run the automation in ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/running-automations-multiple-accounts-regions.html",children:"multi-account/multi-Region"})," mode."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},1470:(e,n,a)=>{a.d(n,{A:()=>M});var s=a(6540),t=a(4164),i=a(7559),o=a(3104),r=a(6347),l=a(205),c=a(7485),d=a(1682),u=a(679);function m(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return m(e).map(({props:{value:e,label:n,attributes:a,default:s}})=>({value:e,label:n,attributes:a,default:s}))}(a);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const a=(0,r.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(t),(0,s.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(a.location.search);n.set(t,e),a.replace({...a.location,search:n.toString()})},[t,a])]}function f(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,i=h(e),[o,r]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i})),[c,d]=p({queryString:a,groupId:t}),[m,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,t]=(0,u.Dv)(n);return[a,(0,s.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),S=(()=>{const e=c??m;return g({value:e,tabValues:i})?e:null})();(0,l.A)(()=>{S&&r(S)},[S]);return{selectedValue:o,selectValue:(0,s.useCallback)(e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),f(e)},[d,f,i]),tabValues:i}}var S=a(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=a(4848);function A({className:e,block:n,selectedValue:a,selectValue:s,tabValues:i}){const r=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,t=r.indexOf(n),o=i[t].value;o!==a&&(l(n),s(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=r.indexOf(e.currentTarget)+1;n=r[a]??r[0];break}case"ArrowLeft":{const a=r.indexOf(e.currentTarget)-1;n=r[a]??r[r.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:s})=>(0,x.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{r.push(e)},onKeyDown:d,onClick:c,...s,className:(0,t.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function w({lazy:e,children:n,selectedValue:a}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===a);return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function b(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,t.A)(i.G.tabs.container,"tabs-container",y.tabList),children:[(0,x.jsx)(A,{...n,...e}),(0,x.jsx)(w,{...n,...e})]})}function M(e){const n=(0,S.A)();return(0,x.jsx)(b,{...e,children:m(e.children)},String(n))}},3659:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/images/task-manager-ssm-agent-f98d1f2259433a0689accb0a3168fbbb.png"},6851:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/images/task-manager-new-action-13ff35dff112343bf46ba38b21cb16d6.png"},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var s=a(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>o});a(6540);var s=a(4164);const t={tabItem:"tabItem_Ymn6"};var i=a(4848);function o({children:e,hidden:n,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,a),hidden:n,children:e})}}}]);